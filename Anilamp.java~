import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import com.jogamp.opengl.*;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.util.FPSAnimator;
import java.util.Random;


public class Anilamp extends JFrame implements ActionListener {

  private static final int WIDTH = 1024;
  private static final int HEIGHT = 768;
  private static final Dimension dimension = new Dimension(WIDTH, HEIGHT);
  private GLCanvas canvas;
  private M01_GLEventListener glEventListener;
  private final FPSAnimator animator;


  public static void main(String[] args) {
    Anilamp b1 = new Anilamp("M01");
    b1.getContentPane().setPreferredSize(dimension);
    b1.pack();
    b1.setVisible(true);
    System.out.println(Math.sinh(1.0/2.0));
  }

  public Anilamp(String textForTitleBar) {
    super(textForTitleBar);
    GLCapabilities glcapabilities = new GLCapabilities(GLProfile.get(GLProfile.GL3));
    canvas = new GLCanvas(glcapabilities);
    Camera camera = new Camera(Camera.DEFAULT_POSITION, Camera.DEFAULT_TARGET, Camera.DEFAULT_UP);
    glEventListener = new M01_GLEventListener(camera);
    canvas.addGLEventListener(glEventListener);
    canvas.addMouseMotionListener(new MyMouseInput(camera));
    canvas.addKeyListener(new MyKeyboardInput(camera));
    getContentPane().add(canvas, BorderLayout.CENTER);


    JPanel p = new JPanel();
    JButton b = new JButton("jump");
    b.addActionListener(this);
    p.add(b);

    b=new JButton("reset");
    b.addActionListener(this);
    p.add(b);

    b=new JButton("random pose");
    b.addActionListener(this);
    p.add(b);

    b=new JButton("open light");
    b.addActionListener(this);
    p.add(b);

    b=new JButton("close light");
    b.addActionListener(this);
    p.add(b);

    this.add(p,BorderLayout.SOUTH);


    addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        animator.stop();
        remove(canvas);
        dispose();
        System.exit(0);
      }
    });
    animator = new FPSAnimator(canvas, 60);
    animator.start();
  }


  public void actionPerformed(ActionEvent e) {
    if (e.getActionCommand().equalsIgnoreCase("jump")) {
      glEventListener.startAnimation();
    }
    else if(e.getActionCommand().equalsIgnoreCase("reset"))
    {
      glEventListener.reset();
    }
    else if(e.getActionCommand().equalsIgnoreCase("random pose"))
    {
      glEventListener.randomPose();
    }
    else if(e.getActionCommand().equalsIgnoreCase("open light"))
    {
      glEventListener.openLamp();
    }

    else if(e.getActionCommand().equalsIgnoreCase("close light"))
    {
      glEventListener.closeLamp();
    }
  }

  class MyKeyboardInput extends KeyAdapter {
    private Camera camera;

    public MyKeyboardInput(Camera camera) {
      this.camera = camera;
    }

    public void keyPressed(KeyEvent e) {
      Camera.Movement m = Camera.Movement.NO_MOVEMENT;
      switch (e.getKeyCode()) {
        case KeyEvent.VK_LEFT:
          m = Camera.Movement.LEFT;
          break;
        case KeyEvent.VK_RIGHT:
          m = Camera.Movement.RIGHT;
          break;
        case KeyEvent.VK_UP:
          m = Camera.Movement.UP;
          break;
        case KeyEvent.VK_DOWN:
          m = Camera.Movement.DOWN;
          break;
        case KeyEvent.VK_A:
          m = Camera.Movement.FORWARD;
          break;
        case KeyEvent.VK_Z:
          m = Camera.Movement.BACK;
          break;
      }
      camera.keyboardInput(m);
    }
  }

  class MyMouseInput extends MouseMotionAdapter {
    private Point lastpoint;
    private Camera camera;

    public MyMouseInput(Camera camera) {
      this.camera = camera;
    }

    /**
     * mouse is used to control camera position
     *
     * @param e instance of MouseEvent
     */
    public void mouseDragged(MouseEvent e) {
      Point ms = e.getPoint();
      float sensitivity = 0.001f;
      float dx = (float) (ms.x - lastpoint.x) * sensitivity;
      float dy = (float) (ms.y - lastpoint.y) * sensitivity;
      //System.out.println("dy,dy: "+dx+","+dy);
      if (e.getModifiers() == MouseEvent.BUTTON1_MASK)
        camera.updateYawPitch(dx, -dy);
      lastpoint = ms;
    }

    /**
     * mouse is used to control camera position
     *
     * @param e instance of MouseEvent
     */
    public void mouseMoved(MouseEvent e) {
      lastpoint = e.getPoint();
    }
  }
}
#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;
uniform Light light1;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 ambient =  light.ambient * material.ambient* vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse)* vec3(texture(first_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec/2 * material.specular) * vec3(texture(second_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;

// ambient
    ambient = light1.ambient * material.ambient * (0.3f,0.3f,0.3f);

    // diffuse
    norm = normalize(aNormal);
    lightDir = normalize(light1.position - aPos);
    diff = max(dot(norm, lightDir), 0.0);
    diffuse = light1.diffuse * (diff * material.diffuse) * (0.4f,0.4f,0.4f);

    // specular
    viewDir = normalize(viewPos - aPos);
    reflectDir = reflect(-lightDir, norm);
    spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    specular = light1.specular * (spec/2 * material.specular);

    result = result + ambient + diffuse + specular;
  fragColor = vec4(result, 1.0);
}